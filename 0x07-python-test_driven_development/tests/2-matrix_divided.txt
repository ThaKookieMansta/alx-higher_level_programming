====================================
2. matrix_divided Module
====================================

Import the module
==================
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Checking Module Docstring
=========================

>>> m = __import__("2-matrix_divided").__doc__
>>> len(m) > 1
True

Checking function Docstring
===========================

>>> f = __import__("2-matrix_divided").matrix_divided.__doc__
>>> len(f) > 1
True


Test for positive integers
===========================
>>> matrix_divided([[10, 20, 30], [40, 50, 60]], 5)
[[2.0, 4.0, 6.0], [8.0, 10.0, 12.0]]

Test for 0 div
--------------

>>> matrix_divided([[10, 20, 30], [40, 50, 60]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

Test for negative integers
===========================
Mixing negative integers in matrix and div
------------------------------------------

>>> matrix_divided([[10, -20, 30], [40, 50, -60]], -5)
[[-2.0, 4.0, -6.0], [-8.0, -10.0, 12.0]]

Negative integer div
--------------------

>>> matrix_divided([[10, 20, 30], [40, 50, 60]], -5)
[[-2.0, -4.0, -6.0], [-8.0, -10.0, -12.0]]

Negative integer Matrix
-----------------------

>>> matrix_divided([[10, -20, 30], [-40, 50, -60]], 5)
[[2.0, -4.0, 6.0], [-8.0, 10.0, -12.0]]

Test for positive floats
=========================

All float values
----------------

>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2, 61.1]], 5.8)
[[4.09, 7.78, 11.66], [6.98, 9.86, 10.53]]

The div is a float
-------------------

>>> matrix_divided([[10, 20, 30], [40, 50, 60]], 5.3)
[[1.89, 3.77, 5.66], [7.55, 9.43, 11.32]]

The matrix is fully a float
---------------------------

>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2, 61.1]], 7)
[[3.39, 6.44, 9.66], [5.79, 8.17, 8.73]]

Testing for negative floats
===========================

The matrix has negative floats
------------------------------

>>> matrix_divided([[-23.7, -45.1, -67.6], [-40.5, -57.2, -61.1]], 7)
[[-3.39, -6.44, -9.66], [-5.79, -8.17, -8.73]]

The div is a negative float
-----------------------------

>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2, 61.1]], -7)
[[-3.39, -6.44, -9.66], [-5.79, -8.17, -8.73]]

Testing for single argument (matrix only)
===========================
>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2, 61.1]], )
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

Testing for invalid argument
=============================

Testing for int instead of matrix
---------------------------------

>>> matrix_divided(0, 7)
Traceback (most recent call last):
TypeError: 'int' object is not iterable

Testing for float instead of matrix
-----------------------------------

>>> matrix_divided(0.6, 7)
Traceback (most recent call last):
TypeError: 'float' object is not iterable

Testing for string instead of matrix
------------------------------------

>>> matrix_divided("This is a test", 7)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing with string instead of div
----------------------------------

>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2, 61.1]], "7")
Traceback (most recent call last):
TypeError: div must be a number

Testing when matrix rows are different sizes
============================================

>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2]], 7)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

Testing with other Non Number values
=====================================
>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2]], None)
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(None, 9)
Traceback (most recent call last):
TypeError: 'NoneType' object is not iterable

>>> matrix_divided(float('nan'))
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2, 9]], float('nan'))
[[nan, nan, nan], [nan, nan, nan]]

>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2, 9]],float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Testing if more arguments are passed
=====================================

>>> matrix_divided([[23.7, 45.1, 67.6], [40.5, 57.2, 9]],9,8)
Traceback (most recent call last):
TypeError: matrix_divided() takes 2 positional arguments but 3 were given
